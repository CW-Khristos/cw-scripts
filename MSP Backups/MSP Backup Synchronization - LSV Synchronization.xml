<?xml version="1.0" encoding="UTF-8" standalone="no" ?>


<service xmlns="http://www.n-able.com" author="support@thecomputerwarriors.com" creationdate="07/23/2018" organization="N-able Technologies" syntaxversion="1.1.0.0" version="1.0.1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">


	<servicedefinition id="499348" reason="" releasedependency="4.5.0.0" servicetype="AMP" version="1.0.1.0">
		<description country="ca" language="en">Custom AMP Service for monitoring MSP Backups LSV Synchronization</description>
		<displayname country="ca" language="en">MSP Backup Synchronization - LSV Synchronization</displayname>
		<displaylabel>MSP Backup Synchronization - LSV Synchronization</displaylabel>
		<help country="ca" language="en">MSP Backup Synchronization - LSV Synchronization</help>
		<popuphelp country="ca" language="en">MSP Backup Synchronization - LSV Synchronization</popuphelp>


		<serviceparameters aggregatedata="false" aggregatetasks="false" maxinstances="100" maxpollrate="60" minpollrate="0" schedulertype="Quartz Based Scheduler" serviceinstancetype="Multiple" timetostale="60" usesstockserviceitem="false"/>


		<moduleparameters>


		
			<moduleparameter key="scan_interval" max="1440" min="0" phardcoded="false" preferredident="0" foruseby="3" type="2" value="0 0/10 * * * ? *">
				<shortdescription country="ca" language="en">Scan Interval</shortdescription>
				<longdescription country="ca" language="en">Scan Interval</longdescription>
				<help country="ca" language="en">The number of minutes between scans.</help>
			</moduleparameter>
			<moduleparameter key="selectedAutomationPolicy" max="1440" min="0" phardcoded="true" preferredident="0" foruseby="3" type="2" value="986776118">
				<shortdescription country="ca" language="en">Automation Manager Policy</shortdescription>
				<longdescription country="ca" language="en">Automation Manager Policy</longdescription>
				<help country="ca" language="en"/>
			</moduleparameter>
			<moduleparameter key="serviceIdentifier" max="1440" min="0" phardcoded="false" preferredident="1" foruseby="3" type="2" value="Local Speed Vault">
				<shortdescription country="ca" language="en">Service Identifier</shortdescription>
				<longdescription country="ca" language="en">Service Identifier</longdescription>
				<help country="ca" language="en"/>
			</moduleparameter>
		</moduleparameters>



		<scandetails>
			<scandetailid>3038000</scandetailid>
			<scandetailid>3038001</scandetailid>
			<scandetailid>3038002</scandetailid>
		</scandetails>
	</servicedefinition>



	<scandetail id="3038000" monitoringtypeon="true" processforstate="true" cookid="5" releasedependency="11.0.1.1043" version="1.0.0.0" >
		<thresholddefaults>
			<thresholds configurable="true" type="String"><threshold high="1" low="1" streval="match" strvalue="Enabled" state="Normal"/><threshold high="0" low="0" streval="match" strvalue="Enabled" state="Failed"/>
			</thresholds>
		</thresholddefaults>
		<description country="ca" language="en">LSV Status</description>
		<displayname country="ca" language="en">SD499348_LSVOut</displayname>
	</scandetail>



	<scandetail id="3038001" monitoringtypeon="true" processforstate="true" cookid="23" releasedependency="11.0.1.1043" version="1.0.0.0" >
		<thresholddefaults>
			<thresholds configurable="true" type="Double"><threshold high="100" low="90" streval="" strvalue="" state="Normal"/><threshold high="89" low="70" streval="" strvalue="" state="Warning"/><threshold high="69" low="0" streval="" strvalue="" state="Failed"/>
			</thresholds>
		</thresholddefaults>
		<description country="ca" language="en">LSV Synchronization</description>
		<displayname country="ca" language="en">SD499348_LSVSyncOut</displayname>
	</scandetail>



	<scandetail id="3038002" monitoringtypeon="true" processforstate="true" cookid="5" releasedependency="11.0.1.1043" version="1.0.0.0" >
		<thresholddefaults>
			<thresholds configurable="true" type="String"><threshold high="0" low="0" streval="contain" strvalue="Could not parse" state="Normal"/><threshold high="1" low="1" streval="contain" strvalue="Could not parse" state="Failed"/>
			</thresholds>
		</thresholddefaults>
		<description country="ca" language="en">LSV Backup Destination</description>
		<displayname country="ca" language="en">SD499348_LSVPathOut</displayname>
	</scandetail>


	<automationmanagerpolicy name="MSP Backup Synchronization - LSV Synchronization" description="Custom AMP Service to monitor MSP Backups LSV Status" itemuuid="6e347b71-8d7c-4df2-ae85-88b3dcbde8d7" category="0" uploaddate="2018-06-05 15:28:02">
		<ampdata></ampdata>
	</automationmanagerpolicy>

</service>
<?N-able-SDK version=3.0?>