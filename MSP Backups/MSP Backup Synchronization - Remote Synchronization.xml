<?xml version="1.0" encoding="UTF-8" standalone="no" ?>


<service xmlns="http://www.n-able.com" author="support@thecomputerwarriors.com" creationdate="07/23/2018" organization="N-able Technologies" syntaxversion="1.1.0.0" version="1.0.1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">


	<servicedefinition id="254866" reason="" releasedependency="4.5.0.0" servicetype="AMP" version="1.0.1.0">
		<description country="ca" language="en">Custom AMP Service for monitoring MSP Backups Remote Synchronization</description>
		<displayname country="ca" language="en">MSP Backup Synchronization - Remote Synchronization</displayname>
		<displaylabel>MSP Backup Synchronization - Remote Synchronization</displaylabel>
		<help country="ca" language="en">MSP Backup Synchronization - Remote Synchronization</help>
		<popuphelp country="ca" language="en">MSP Backup Synchronization - Remote Synchronization</popuphelp>


		<serviceparameters aggregatedata="false" aggregatetasks="false" maxinstances="100" maxpollrate="60" minpollrate="0" schedulertype="Quartz Based Scheduler" serviceinstancetype="Multiple" timetostale="60" usesstockserviceitem="false"/>


		<moduleparameters>


		
			<moduleparameter key="scan_interval" max="1440" min="0" phardcoded="false" preferredident="0" foruseby="3" type="2" value="0 0/10 * * * ? *">
				<shortdescription country="ca" language="en">Scan Interval</shortdescription>
				<longdescription country="ca" language="en">Scan Interval</longdescription>
				<help country="ca" language="en">The number of minutes between scans.</help>
			</moduleparameter>
			<moduleparameter key="selectedAutomationPolicy" max="1440" min="0" phardcoded="true" preferredident="0" foruseby="3" type="2" value="321461272">
				<shortdescription country="ca" language="en">Automation Manager Policy</shortdescription>
				<longdescription country="ca" language="en">Automation Manager Policy</longdescription>
				<help country="ca" language="en"/>
			</moduleparameter>
			<moduleparameter key="serviceIdentifier" max="1440" min="0" phardcoded="false" preferredident="1" foruseby="3" type="2" value="Remote Storage">
				<shortdescription country="ca" language="en">Service Identifier</shortdescription>
				<longdescription country="ca" language="en">Service Identifier</longdescription>
				<help country="ca" language="en"/>
			</moduleparameter>
		</moduleparameters>



		<scandetails>
			<scandetailid>3142500</scandetailid>
		</scandetails>
	</servicedefinition>



	<scandetail id="3142500" monitoringtypeon="true" processforstate="true" cookid="23" releasedependency="11.0.1.1043" version="1.0.0.0" >
		<thresholddefaults>
			<thresholds configurable="true" type="Double"><threshold high="100" low="90" streval="" strvalue="" state="Normal"/><threshold high="89" low="70" streval="" strvalue="" state="Warning"/><threshold high="69" low="0" streval="" strvalue="" state="Failed"/>
			</thresholds>
		</thresholddefaults>
		<description country="ca" language="en">Remote Synchronization</description>
		<displayname country="ca" language="en">SD254866_RemoteSyncOut</displayname>
	</scandetail>


	<automationmanagerpolicy name="MSP Backup Synchronization - Remote Synchronization" description="Custom AMP Service to monitor MSP Backups Remote Synchronization" itemuuid="7bb19a35-762c-489b-be2e-cbb015d6344d" category="0" uploaddate="2018-01-31 12:25:58.498">
		<ampdata></ampdata>
	</automationmanagerpolicy>

</service>
<?N-able-SDK version=3.0?>